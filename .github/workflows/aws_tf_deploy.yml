name: "Deploy tf envs"
on:
  workflow_call:
    inputs:
      tf_version:
        description: 'Specifies version of Terraform to use, default latest'
        required: false
        type: string
        default: latest
      gh_environment:
        description: 'Specifies the GitHub deployment environment'
        required: true
        type: string
      aws_region:
        description: 'The aws region to deploy to'
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        description: 'aws access key id'
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: 'aws secret access key'
        required: true

jobs:
  setup-aws:
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

  tf-init:
    runs-on: ubuntu-latest
    needs: setup-aws
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2                         # default
          verbose: false                     # default
          arch: amd64                        # allowed values: amd64, x86, x64, arm, arm64
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.2
        with:
          terraform_version: ${{ inputs.tf_version }}

      - name: Terraform init
        id: init
        run: terraform init -input=false -backend-config=backend.tfvars

  code-quality:
    runs-on: ubuntu-latest
    needs: tf-init
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0
    
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0
      
      - name: Show version
        run: tflint --version

      - name: Init TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint -f compact

      - name: Terraform format
        run: terraform fmt -check

      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3 # we lint all yamls in the repository

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov scan
        run: checkov -d .

  deploy-tf:
    runs-on: ubuntu-latest
    needs: code-quality
    environment: ${{ inputs.gh_environment }}
    defaults:
      run:
        shell: bash
    steps:

      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Create tf workspace
        run: |
          (terraform workspace select ${{ inputs.gh_environment }} || terraform workspace new ${{ inputs.gh_environment }})

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=${{ inputs.gh_environment }}-plan.tfplan -var-file=${{ inputs.gh_environment }}.tfvars -input=false
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -input=false ${{ inputs.gh_environment }}-plan.tfplan
